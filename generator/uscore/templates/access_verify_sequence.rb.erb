# frozen_string_literal: true

module Inferno
  module Sequence
    class ONCAccessVerify<%=access_verify_restriction.titlecase %>Sequence < SequenceBase

      title '<%=access_verify_restriction.titlecase%> Resource Type Access'

      <% if access_verify_restriction == 'restricted' %>
      <%# METADATA FOR RESTRICTED ACCESS TEST%>
      description 'Verify that access to resource types can be restricted to app.'
      test_id_prefix 'AVR'
      details %(
        This test ensures that patients are able to grant or deny access to a subset of resources to an app.
        It also verifies that patients can prevent issuance of a refresh token by denying the `offline_access` scope.  The tester provides a list of resources
        that will be granted during the SMART App Launch process, and this test verifies that the scopes granted
        are consistent with what the tester provided.  It also formulates queries to ensure that the app
        is either given access to, or denied access to, the appropriate resource types based on those chosen
        by the tester.
        
        Resources that can be mapped to USCDI are checked in this test, including:
        <% non_delayed_sequences.group_by{|sequence| sequence[:resource]}.values.map(&:first).each do |resource| %>
          * <%= resource[:resource]%><% end %>

        For each of the resources that can be mapped to USCDI data class or elements, this set of tests
        performs a minimum number of requests to determine if access to the resource type is appropriately allowed or denied given the
        scope granted.  In the case of the Patient resource, this test simply performs a read request.
        For other resources, it performs a search by patient that must be supported by the server.  In some cases,
        servers can return an error message if a status search parameter is not provided.  For these, the
        test will perform an additional search with the required status search parameter.

        This set of tests does not attempt to access resources that do not directly map to USCDI v1, including Encounter, Location,
        Organization, Practitioner, PractionerRole, and RelatedPerson.  It also does not test Provenance, as this
        resource type is accessed by queries through other resource types.  These resource types are accessed in the more
        comprehensive Single Patient Query tests.

        If the tester chooses to not grant access to a resource, the queries associated with that resource must
        result in either a 401 (Unauthorized) or 403 (Forbidden) status code.  The flexiblity provided here
        is due to some ambiguity in the specifications tested.
      )
      <% else %>
      <%# METADATA FOR FULL ACCESS TEST %>
      description 'Verify that all resource types can be accessed by apps with appropriate scopes.'
      test_id_prefix 'AVU'
      details %(
        This test ensures that apps have full access to USCDI resources if granted access by the tester.
        The tester must grant access to the following resources during the SMART Launch process,
        and this test ensures they all can be accessed:
        <% non_delayed_sequences.group_by{|sequence| sequence[:resource]}.values.map(&:first).each do |resource| %>
          * <%= resource[:resource] %><% end %>

        For each of the resource types that can be mapped to USCDI data class or elements, this set of tests
        performs a minimum number of requests to determine that the resource type can be accessed given the
        scope granted.  In the case of the Patient resource, this test simply performs a read request.
        For other resources, it performs a search by patient that must be supported by the server.  In some cases,
        servers can return an error message if a status search parameter is not provided.  For these, the
        test will perform an additional search with the required status search parameter.
  
        This set of tests does not attempt to access resources that do not directly map to USCDI v1, including Encounter, Location,
        Organization, Practitioner, PractionerRole, and RelatedPerson.  It also does not test Provenance, as this
        resource type is accessed by queries through other resource types. These resources types are accessed in the more
        comprehensive Single Patient Query tests.
      )
      <% end %>
      requires :onc_sl_url, :token, :patient_id, :received_scopes<% if access_verify_restriction == 'restricted' %>, :onc_sl_expected_resources<% end %>

      def scopes
        @instance.received_scopes || @instance.onc_sl_scopes
      end

      def resource_access_as_scope
        <% if access_verify_restriction == 'restricted' %>
        @instance.onc_sl_expected_resources&.split(',')&.map{|resource| "patient/#{resource.strip}.read"}&.join(' ')
        <% else %>
          all_resources = [
          <%= non_delayed_sequences.group_by{|sequence| sequence[:resource]}.values.map(&:first).map{|resource| "'#{resource[:resource]}'"}.join(",\n") %>,
          'Patient'
          ]
          all_resources.map{|resource| "patient/#{resource.strip}.read"}&.join(' ')
        <% end %>
      end

      def assert_response_insufficient_scope(response)

        # This is intended for tests that are expecting the server to reject a
        # resource request due to user not authorizing the application for that
        # particular resource.  In early versions of this test, these tests
        # expected a 401 (Unauthorized), but after later review it seems
        # reasonable for a server to return 403 (Forbidden) instead.  This
        # assertion therefore allows either.

        message = "Bad response code: expected 403 (Forbidden) or 401 (Unauthorized), but found #{response.code}."
        assert [401, 403].include?(response.code), message

      end

      def url_property
        'onc_sl_url'
      end

      def scope_granting_access(resource, scopes)
        scopes.split(' ').find do |scope| 
          scope.start_with?("patient/#{resource}", 'patient/*') && scope.end_with?('*', 'read')
        end
      end

      test :validate_right_scopes do
        metadata do
          id '01'
          <% if access_verify_restriction == 'restricted' %>name 'Scope granted is limited to those chosen by user during authorization.'
          <% else %>name 'Scope granted enables access to all US Core resource types.'
          <% end %>
          link 'http://hl7.org/fhir/us/core/StructureDefinition/us-core-patient'
          description %(
            This test confirms that the scopes received during authorization match those that
            expected for this launch.
          )
        end

        skip_if @instance.received_scopes.nil?, 'No SMART scopes were provided to the test.'

        all_resources = [
        <%= non_delayed_sequences.group_by{|sequence| sequence[:resource]}.values.map(&:first).map{|resource| "'#{resource[:resource]}'"}.join(",\n") %>,
        'Patient'
        ]


       allowed_resources = all_resources.select {|resource| scope_granting_access(resource, resource_access_as_scope)}
       denied_resources = all_resources - allowed_resources

       <% if access_verify_restriction == 'restricted' %>
       assert denied_resources.present?, "This test requires at least one resource to be denied, but the provided scope '#{@instance.received_scopes}' grants access to all resource types."
       received_scope_resources = all_resources.select{|resource| scope_granting_access(resource, @instance.received_scopes)}
       unexpected_resources = received_scope_resources - allowed_resources
       assert unexpected_resources.empty?, "This test expected the user to deny access to the following resources that are present in scopes received during token exchange response: #{unexpected_resources.join(', ')}"
       pass "Resources to be denied: #{denied_resources.join(',')}"
       <% else %>
       assert denied_resources.empty?, "This test requires access to all US Core resources with patient information, but the received scope '#{@instance.received_scopes}' does not grant access to the '#{denied_resources.join(', ')}' resource type(s)."
       pass 'Scopes received indicate access to all necessary resources.'
       <% end %>
      end

      test :validate_patient_authorization do
        metadata do
          id '02'
          name 'Patient resources on the FHIR server follow the US Core Implementation Guide'
          link 'http://hl7.org/fhir/us/core/StructureDefinition/us-core-patient'
          description %(
            This test checks if the resources returned from bulk data export conform to the US Core profiles. This includes checking for missing data elements and valueset verification.
          )
        end
        skip_if @instance.patient_id.nil?, 'Patient ID not provided to test. The patient ID is typically provided during in a SMART launch context.'
        skip_if @instance.received_scopes.nil?, 'No scopes were received.'

        @client = FHIR::Client.for_testing_instance(@instance, url_property: url_property)
        @client.set_bearer_token(@instance.token) unless @client.nil? || @instance.nil? || @instance.token.nil?
        @client&.monitor_requests

        reply = @client.read(FHIR::Patient, @instance.patient_id)

        access_allowed_scope = scope_granting_access('Patient', resource_access_as_scope)

        if access_allowed_scope.present?
          assert_response_ok reply
          pass "Access expected to be granted and request properly returned #{reply&.response&.dig(:code)}"
        else

          assert_response_insufficient_scope reply

        end

      end
      <% non_delayed_sequences.group_by{|sequence| sequence[:resource]}.values.map(&:first).each_with_index do |sequence, index| %>

      test :validate_<%=sequence[:resource].downcase%>_authorization do
        metadata do
          id '<%=format('%02d', index + 3) %>'
          name 'Access to <%=sequence[:resource]%> resources are restricted properly based on patient-selected scope'
          link 'http://www.hl7.org/fhir/smart-app-launch/scopes-and-launch-context/index.html'
          description %(
          )
        end

        skip_if @instance.patient_id.nil?, 'Patient ID not provided to test.'
        skip_if @instance.received_scopes.nil?, 'No scopes were received.'

        <% params_for_searches = sequence[:searches].find{|search| search[:expectation] == 'SHALL'}[:names] %>

        params = {<% params_for_searches.each_with_index do |param, index| %>
          <%= param %>: <% if param == 'patient'%>@instance.patient_id<% else %>'<%=access_verify_param_map["#{sequence[:resource].downcase}_#{param}".to_sym]%>'<% end %><% if index < params_for_searches.count - 1  %>,<% end %><% end %>
        }

        options = {
          search: {
            flag: false,
            compartment: nil,
            parameters: params
          }
        }
        reply = @client.search('<%=sequence[:resource]%>', options)
        access_allowed_scope = scope_granting_access('<%=sequence[:resource]%>', resource_access_as_scope)

        if access_allowed_scope.present?
          <% if access_verify_status_codes.key?(sequence[:resource].downcase.to_sym) %>
          if reply.code == 400
            error_message = 'Server is expected to grant access to the resource.  A search without a status can return an HTTP 400 status, but must also must include an OperationOutcome. No OperationOutcome is present in the body of the response.'
            begin
              parsed_reply = JSON.parse(reply.body)
              assert parsed_reply['resourceType'] == 'OperationOutcome', error_message
            rescue JSON::ParserError
              assert false, error_message
            end

            <% additional_filters = access_verify_status_codes[sequence[:resource].downcase.to_sym] %>

            <% additional_filters.each do |key, value| %>
            options[:search][:parameters].merge!({'<%= key %>': '<%= value %>'})
            <% end %>
            reply = @client.search('<%=sequence[:resource]%>', options)
          end
          <% end %>
          assert_response_ok reply
          pass "Access expected to be granted and request properly returned #{reply&.response&.dig(:code)}"
    
        else
          assert_response_insufficient_scope reply
        end

      end<% end %>
    end
  end
end
